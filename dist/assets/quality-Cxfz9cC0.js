function b(e){return Math.min(5,Math.max(1,Math.round(e||1)))}function $(e){const n=[];let t=(e.moods||[]).map(r=>r.trim()).filter(Boolean);t.length===0&&(n.push('No moods supplied – defaulted to ["dark"].'),t=["dark"]);const s=new Set;t=t.filter(r=>s.has(r)?!1:(s.add(r),!0));const i=b(e.intensity);i!==e.intensity&&n.push("Intensity clamped to 1..5 range."),e.durationSec&&(e.durationSec<15||e.durationSec>600)&&n.push("Unusual duration (outside 15s..600s) – ensure intentional.");const o={moods:t,useCase:e.useCase,era:e.era||"modern",intensity:i,durationSec:e.durationSec};return{issues:n,normalized:o}}const M={dark:["techno","trance","dnb"],hypnotic:["techno","trance","ambient"],uplifting:["trance","house","pop"],driving:["techno","dnb","trance"],melancholic:["lofi","ambient","cinematic"],energetic:["techno","trap","dnb"],dreamy:["ambient","trance","lofi"],aggressive:["dubstep","trap","dnb"]},C={club:{techno:.15,trance:.1,house:.12,dnb:.08},cinematic:{cinematic:.25,ambient:.15,orchestral:.2},lofi:{lofi:.3,hiphop:.1},game:{ambient:.12,cinematic:.15,techno:.05},ambient:{ambient:.3,cinematic:.1},pop:{pop:.3,house:.08}},P={"90s":{techno:.07,trance:.07,hiphop:.05},"2000s":{trance:.06,dubstep:.05,pop:.04},futuristic:{techno:.05,trap:.05,ambient:.05}};function A(e){const n=new Map,t=e.moods;t.forEach(o=>{const r=M[o];r&&r.forEach((u,h)=>{const d=1-h*.15,l=n.get(u)||{score:0,coverage:0,rationaleParts:[]};l.score+=d,l.coverage+=1/t.length,l.rationaleParts.push(`mood:${o}`),n.set(u,l)})});const s=e.useCase&&C[e.useCase];s&&Object.entries(s).forEach(([o,r])=>{const u=n.get(o)||{score:0,coverage:0,rationaleParts:[]};u.score+=r,u.rationaleParts.push(`useCase:${e.useCase}`),n.set(o,u)});const i=e.era&&P[e.era];return i&&Object.entries(i).forEach(([o,r])=>{const u=n.get(o)||{score:0,coverage:0,rationaleParts:[]};u.score+=r,u.rationaleParts.push(`era:${e.era}`),n.set(o,u)}),e.intensity>=4&&["techno","trance","dnb","dubstep","trap"].forEach(o=>{const r=n.get(o);r&&(r.score*=1.08,r.rationaleParts.push("intensity:boost"))}),n}function O(e,n=3){const t=Array.from(e.entries()).map(([i,o])=>({genre:i,confidence:o.score,rationale:o.rationaleParts.join(", "),moodCoverage:Math.min(1,o.coverage)}));if(t.length===0)return[];const s=Math.max(...t.map(i=>i.confidence));return t.forEach(i=>i.confidence=s>0?+(i.confidence/s).toFixed(3):0),t.sort((i,o)=>o.confidence-i.confidence),t.slice(0,n)}function R(e){const{normalized:n,issues:t}=$(e),s=A(n),i=O(s,3);return{intent:n,candidates:i,issues:t}}import.meta.vitest&&(R({moods:["dark","hypnotic"],intensity:b(4)}).candidates.length||console.warn("No candidates produced for base trial"));function D(e,n){return`${e}_${n}`}const E={kick:"solid four-on-floor",bass:"sub pulse",hats:"tight 16th shimmer",snare:"snappy minimal",perc:"sporadic texture hits",pad:"warm evolving",lead:"hypnotic motif",atmos:"dark airy noise bed",fx:"sparse sweeps"},N={intro:2,build:3,drop:5,main:4,break:2,outro:1};function q(e,n={}){const{normalized:t}=$(e),s=Math.min(256,Math.max(32,n.targetBars||B(t.durationSec))),i=["intro","build","drop","main","break","main","outro"],o=[.08,.12,.18,.22,.12,.18,.1],r=[];let u=0;return i.forEach((h,d)=>{const l=s-u;let c=Math.max(4,Math.round(s*o[d]));d===i.length-1&&(c=Math.max(4,l)),c>l&&(c=l),u+=c;const a=N[h],p=I(a,t.intensity);r.push({id:D(d,h),kind:h,bars:c,energy:p,roles:z(h,p,t)})}),{intent:t,sections:r,version:1}}function B(e){if(!e)return 128;const t=e/60*128;return Math.round(t/4)}function I(e,n){const t=(e+n)/2;return Math.min(5,Math.max(1,Math.round(t)))}function z(e,n,t){const s={},i=t.moods[0],o=_(i);return Object.keys(E).forEach(r=>{if(e==="intro"&&["lead","snare"].includes(r)||e==="break"&&r==="kick"||e==="outro"&&r==="lead")return;let u=E[r];n>=4&&(r==="hats"||r==="lead")&&(u=u.replace(/minimal|tight/,"driving")),n<=2&&r==="perc"&&(u="subtle percussive flickers"),u=`${o} ${u}`.trim(),s[r]=u}),s}function _(e){return e==="dark"?"dark":e==="hypnotic"?"looping":e==="uplifting"?"bright":e==="dreamy"?"hazy":e==="aggressive"?"punchy":e}function G(e){const n=[];return n.push(`#INTENT moods=${e.intent.moods.join(",")} useCase=${e.intent.useCase||"-"} era=${e.intent.era} intensity=${e.intent.intensity}`),e.sections.forEach(t=>{const s=Object.entries(t.roles).map(([i,o])=>{const r=o.split(/\s+/).slice(0,3).join(" ");return`${i}:{${r}}`}).join(" ");n.push(`${t.id}|${t.kind}|bars=${t.bars}|e=${t.energy}|${s}`)}),n.join(`
`)}function K(e){const n=e.split(/\n+/).map(c=>c.trim()).filter(Boolean);if(!n.length||!n[0].startsWith("#INTENT"))return null;const t=n[0],s=/moods=([^\s]+)/.exec(t),i=/useCase=([^\s]+)/.exec(t),o=/era=([^\s]+)/.exec(t),r=/intensity=(\d+)/.exec(t),u=s?s[1].split(",").filter(Boolean):["dark"],h=b(r?Number(r[1]):3),d={moods:u,useCase:i&&i[1]!=="-"?i[1]:void 0,era:o?o[1]:"modern",intensity:h,durationSec:void 0},l=[];return n.slice(1).forEach(c=>{const a=c.split("|");if(a.length<5)return;const[p,m,g,f,j]=a,S=Number(g.replace(/bars=/,""))||4,x=Number(f.replace(/e=/,""))||3,v={};j.split(/\s+/).forEach(w=>{const y=/(\w+):\{([^}]+)}/.exec(w);y&&(v[y[1]]=y[2])}),l.push({id:p,kind:m,bars:S,energy:x,roles:v})}),{intent:d,sections:l,version:1}}function U(e){return`${e.intent.moods.join("/")} :: ${e.sections.length} sections :: totalBars=${e.sections.reduce((n,t)=>n+t.bars,0)}`}const T={includeStructureLine:!0,maxRoleWordsPerSection:2,collapseDuplicateAdjectives:!0},L=new Set(["solid","minimal","pulse","motif","sparse"]);function V(e,n={}){const t={...T,...n},{intent:s}=e,i=e.sections.map(l=>l.kind).join("→"),o=e.sections.find(l=>l.kind==="drop")||e.sections.find(l=>l.kind==="main")||e.sections[0],r=[];o&&Object.entries(o.roles).forEach(([l,c])=>{const a=H(c,t);a&&r.push(`${l}: ${a}`)});const u=r.slice(0,6).join("; "),h=W(e);let d=`${s.moods.join("/")} ${s.useCase||""} futuristic electronic track (intensity ${s.intensity}/5)`;return t.includeStructureLine&&(d+=`. Structure ${i}.`),d+=` Emphasize ${u}. Energy curve ${h}.`,d+=" Clean low end, balanced mids, evolving atmosphere.",d.replace(/\s+/g," ").trim()}function H(e,n){let t=e.split(/\s+/).filter(Boolean);if(n.collapseDuplicateAdjectives){const s=new Set;t=t.filter(i=>{const o=i.toLowerCase();return s.has(o)?!1:(s.add(o),!0)})}return t=t.filter(s=>!(L.has(s)&&s.length<7)),n.maxRoleWordsPerSection&&t.length>n.maxRoleWordsPerSection&&(t=t.slice(0,n.maxRoleWordsPerSection)),t.join(" ")}function W(e){if(!e.sections.length)return"flat";const n=e.sections[0].energy,s=(e.sections.find(o=>o.kind==="drop")||e.sections.find(o=>o.energy===5)||e.sections[Math.floor(e.sections.length/2)]).energy,i=e.sections[e.sections.length-1].energy;return n<s&&i<s?`rises to ${s} then resolves to ${i}`:n<s&&i===s?`builds to sustained ${s}`:`varied around ${s}`}const k=["kick","bass","hats","snare","perc","pad","lead","atmos","fx"];function J(e){const n=new Map;k.forEach(a=>n.set(a,0));const t=[],s=e.sections.map(a=>a.energy),i=[];e.sections.forEach(a=>{const p=Object.keys(a.roles).length;a.energy>=4&&p<=4&&t.push(a.id),Object.entries(a.roles).forEach(([m,g])=>{n.set(m,(n.get(m)||0)+1),g.split(/[^a-zA-Z]+/).map(f=>f.toLowerCase()).filter(f=>f.length>3).forEach(f=>i.push(f))})});const o=k.filter(a=>(n.get(a)||0)===0),r=s.slice(1).map((a,p)=>a-s[p]),u=r.reduce((a,p)=>a+Math.abs(p),0)/Math.max(1,r.length),h=u>1.8?"Highly volatile energy curve":u<.6?"Very flat energy progression":"Balanced energy transitions",d=new Map;i.forEach(a=>d.set(a,(d.get(a)||0)+1));const l=[...d.entries()].filter(([,a])=>a>2).sort((a,p)=>p[1]-a[1]).slice(0,6).map(([a,p])=>({token:a,count:p})),c=[];return o.length&&c.push(`Consider adding descriptors for: ${o.join(", ")}`),t.length&&c.push(`High-energy sections with sparse layering: ${t.join(", ")} (add lead/perc/fx variations)`),l.length&&c.push("Reduce adjective repetition: "+l.map(a=>`${a.token}(${a.count})`).join(", ")),h.includes("flat")&&c.push("Raise contrast: increase build/drop energy or reduce break energy"),h.includes("volatile")&&c.push("Smooth transitions: adjust adjacent section energy by +/-1"),{missingRoles:o,underusedHighEnergy:t,energyImbalance:h,descriptorRepetition:l,suggestions:c}}const F=["dark","bright","punchy","warm","looping","driving","hazy","subtle","solid","tight","minimal","evolving","hypnotic","airy","saturated"];function Y(e){const t=e.sections.map(c=>Object.values(c.roles).join(" ")).join(" ").toLowerCase().split(/[^a-z0-9]+/).filter(Boolean),s=t.filter(c=>F.includes(c)),i={};s.forEach(c=>{i[c]=(i[c]||0)+1});const o=[];Object.entries(i).forEach(([c,a])=>{a>4&&o.push({code:"repeat-adj",message:`Adjective "${c}" appears ${a} times – consider variety.`,severity:"warn"})});const r=["kick","bass","sub","low"];t.filter(c=>r.includes(c)).length<3&&o.push({code:"lowend-scarce",message:"Few low-end descriptors; consider clarifying bass / kick character.",severity:"info"});const h=s.length/Math.max(1,t.length);h>.5&&o.push({code:"adj-heavy",message:"Descriptor density high; may risk model dilution.",severity:"warn"});const d=Object.keys(i).length;let l=100;return o.forEach(c=>{l-=c.severity==="warn"?8:3}),h>.5&&(l-=5),d<4&&(l-=5),l=Math.max(0,l),{score:l,issues:o,tokenCounts:{adjectives:s.length,uniqueAdjectives:d}}}export{Y as a,q as b,b as c,U as d,V as e,J as f,K as p,R as r,G as s};
